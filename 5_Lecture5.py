# Декомпозиция - разборка. Букет цветов и мы эти цветы разбираем по отдельности. 
# Композиция - сборка цветов в букет. 

# Декомпозиция - я беру некоторую проблему или задачу и разрубаю ее на части. 
# ЕСТЬ проблема. Как к ней подойти? Нужно разбить её на несколько частей и решать их по очереди. 


# Когда у нас есть полотно программного кода и мы из него выдераем кусочки и говорим, что это будут отдельные функции - то это называется - ДЕКОМПОЗИЦИЯ.

# Декомпозиция - разбиение задачи на подзадачи. Как правильно разбить задачу на подзадачи? Как сделать это адекватно и удобно? 
# 
# Декомпозиция оформляется на (ФУНКЦИИ), ОБЪЕКТЫ, МОДУЛИ. 
# 
# 1) Декомпозиция может являтья частью РЕФАКТОРИНГА. 2) Декомпозиция может быть частью ПРОЕКТИРОВАНИЯ. 
# 
#  
# 
# ИМПЕРАТИРНОЕ ПРОГРАММИРОВАНИЕ - ЯЗЫК С. Программа представляет собой последовательность действий. Императивное синоним слова ПРОЦЕДУРНОЕ. 
# 
# 
# СТРУКТУРНОЕ ПРОГРАММИРОВАНИЕ. Э.В. Дейкстора. Н. Вирт.
# Проектирование "сверху вниз" - от использования функции к ее реализации. Я в начале вижу интерфейс функции (x, y, width, height)


# HOUSE
# Итеративная разработка. Идея такой разработки в том, что мы приводим программу регулярно в консистентное состояние. Программа в этом состоянии может быть запущена
# и она может быть протестирована. Мы можем ее "тыкать". 
# 
# Итеративная разработка хорошо сочетается с системой контроля версий. + Git.
# 
# Делай изменения итеративно от работающей версии программы к работающей, так, чтобы изменения программы было не большим. 




#  Прописываем детали интерфейса. 


def main():
   x, y = 100, 100
   width, height = 200, 200

   draw_house(x, y, width, height)


def draw_house(x, y, width, height):

   '''
   Нарисовать домик ширины width и высоты height от опорной точки (x, y), которая находится в середине
   нижней точки фундамента. 
   
   x - координата середины домика
   y - координата низа фундамента
   width - полная ширина домика (фундамент или вылеты кришы включены)
   height - полная высота домика

   '''


   print('Типа рисую домик...', x, y, width, height )
   
   foundation_height = 0.05 * height
   walls_heigth = 0.5 * height
   walls_width = 0.9 * width
   roof_height = height - foundation_height - walls_heigth

   draw_house_foundation(x, y, width, foundation_height)
   draw_house_walls(x, y - foundation_height, walls_heigth, walls_width)
   draw_house_roof(x, y - foundation_height - walls_heigth, width, roof_height)


def draw_house_foundation(x, y, width, height):
   '''
   Нарисовать основание домика...

   '''
   print('Типа рисую основание...', x, y, width, height )
   pass


def draw_house_walls(x, y, width, height):
   '''
   Нарисовать стены домика...

   '''
   print('Типа рисую стены...', x, y, width, height )
   pass


def draw_house_roof(x, y, width, height):
   '''
   Нарисовать крышу домика...

   '''
   print('Типа рисую крышу...', x, y, width, height )
   pass


main()